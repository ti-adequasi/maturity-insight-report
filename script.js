// Fun√ß√µes auxiliares
const getMaturityLevelText = (score) => {
  if (score >= 4.6) return "Ideal";
  if (score >= 4.1) return "Avan√ßado";
  if (score >= 3.1) return "Intermedi√°rio";
  if (score >= 2.1) return "B√°sico";
  return "Iniciante";
};

const getMaturityLevelColor = (level) => {
  switch (level) {
    case "Ideal": return "#22c55e";
    case "Avan√ßado": return "#84cc16";
    case "Intermedi√°rio": return "#eab308";
    case "B√°sico": return "#f97316";
    case "Iniciante": return "#ef4444";
    default: return "#94a3b8";
  }
};

// Dados de exemplo (ser√£o substitu√≠dos por dados reais)
const segmentScores = [
  {
    segmentId: 'seguranca_da_informacao',
    title: 'Seguran√ßa da Informa√ß√£o',
    icon: 'üîê',
    color: 'segments-security',
    average: 3.8,
    maturityLevel: 'Intermedi√°rio'
  },
  {
    segmentId: 'ciberseguranca',
    title: 'Ciberseguran√ßa',
    icon: 'üõ°Ô∏è',
    color: 'segments-cyber',
    average: 4.2,
    maturityLevel: 'Avan√ßado'
  }
];

// Fun√ß√£o principal para renderizar o relat√≥rio
function renderReport() {
  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleDateString('pt-BR', { 
    day: 'numeric', 
    month: 'long', 
    year: 'numeric' 
  });
  
  const overallAverage = segmentScores.reduce((sum, s) => sum + s.average, 0) / segmentScores.length;
  const overallLevel = getMaturityLevelText(overallAverage);
  
  // Renderiza√ß√£o do HTML
  document.getElementById('root').innerHTML = `
    <div class="max-w-4xl mx-auto">
      <div class="mb-8 p-6 bg-blue-600 text-white rounded-lg">
        <div class="flex justify-between">
          <h1 class="text-2xl font-bold">Relat√≥rio de Maturidade LGPD</h1>
          <div class="text-sm opacity-80">${formattedDate}</div>
        </div>
        <p class="text-xl mt-2">Nome da Empresa</p>
      </div>
      
      <!-- Conte√∫do do relat√≥rio ser√° gerado aqui -->
    </div>
  `;
}

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', renderReport);